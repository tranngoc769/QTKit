#!/usr/bin/env python3
"""
QTKit Enhanced Build Script
Professional build with code signing and distribution
"""

import os
import sys
import subprocess
import shutil
import tempfile

def clean_build():
    """Clean previous builds"""
    print("üßπ Cleaning previous builds...")
    dirs_to_clean = ["build", "dist", "__pycache__"]
    for dir_name in dirs_to_clean:
        if os.path.exists(dir_name):
            shutil.rmtree(dir_name)
            print(f"  Removed: {dir_name}/")

def check_tools():
    """Check required build tools"""
    print("üîç Checking build tools...")
    
    # Check PyInstaller
    try:
        subprocess.run(["pyinstaller", "--version"], capture_output=True, check=True)
        print("  ‚úÖ pyinstaller found")
    except:
        print("  üì¶ Installing pyinstaller...")
        subprocess.run([sys.executable, "-m", "pip", "install", "pyinstaller"], check=True)
        print("  ‚úÖ pyinstaller installed")
    
    # Check macOS tools (these should always be available on macOS)
    macos_tools = [
        ("codesign", ["codesign", "--version"]),
        ("hdiutil", ["hdiutil", "info"]),
        ("security", ["security", "--help"])
    ]
    
    for tool_name, cmd in macos_tools:
        try:
            subprocess.run(cmd, capture_output=True, check=True)
            print(f"  ‚úÖ {tool_name} found")
        except:
            print(f"  ‚ö†Ô∏è {tool_name} not available")

def install_requirements():
    """Install required packages"""
    print("üì¶ Installing requirements...")
    try:
        subprocess.run([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"], 
                      check=True, capture_output=True)
        print("‚úÖ Requirements installed")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Failed to install requirements: {e}")
        return False
    return True

def get_signing_identity():
    """Get available code signing identity"""
    print("üîç Looking for code signing identity...")
    
    try:
        result = subprocess.run([
            "security", "find-identity", "-v", "-p", "codesigning"
        ], capture_output=True, text=True, check=True)
        
        # Look for Developer ID Application certificates
        lines = result.stdout.strip().split('\n')
        dev_ids = []
        
        for line in lines:
            if 'Developer ID Application' in line:
                # Extract identity name
                start = line.find('"') + 1
                end = line.rfind('"')
                if start > 0 and end > start:
                    dev_ids.append(line[start:end])
        
        if dev_ids:
            identity = dev_ids[0]
            print(f"  ‚úÖ Found Developer ID: {identity}")
            return identity
        else:
            # Look for any Mac Developer certificates
            for line in lines:
                if 'Mac Developer' in line or 'Apple Development' in line:
                    start = line.find('"') + 1
                    end = line.rfind('"')
                    if start > 0 and end > start:
                        identity = line[start:end]
                        print(f"  ‚ö†Ô∏è Found development certificate: {identity}")
                        print("    Note: This is for development only, not distribution")
                        return identity
            
            print("  ‚ö†Ô∏è No code signing certificates found")
            print("    App will build but may show security warnings on other machines")
            return None
            
    except subprocess.CalledProcessError:
        print("  ‚ö†Ô∏è Could not check signing identities")
        return None

def build_app():
    """Build the app using PyInstaller"""
    print("üî® Building QTKit app...")
    
    cmd = [
        "pyinstaller",
        "--name=QTKit",
        "--onedir",
        "--windowed", 
        "--icon=logo.png",
        "--osx-bundle-identifier=com.qt-corporation.qtkit",
        "--add-data", "logo.png:.",
        "--hidden-import=PySide6.QtCore",
        "--hidden-import=PySide6.QtGui",
        "--hidden-import=PySide6.QtWidgets", 
        "--hidden-import=pynput.keyboard",
        "--hidden-import=AppKit",  # For macOS integration
        "--clean",
        "--noconfirm",
        "main.py"
    ]
    
    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print("‚úÖ App built successfully!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Build failed: {e}")
        if e.stderr:
            print(f"Error details: {e.stderr}")
        return False

def update_info_plist():
    """Update Info.plist with comprehensive permissions and metadata"""
    print("üìù Updating Info.plist...")
    
    info_plist = "dist/QTKit.app/Contents/Info.plist"
    if not os.path.exists(info_plist):
        print("‚ö†Ô∏è Info.plist not found")
        return False
    
    try:
        with open(info_plist, 'r') as f:
            content = f.read()
        
        # Comprehensive permissions and metadata
        updates = [
            # Permissions
            ('<key>NSAccessibilityUsageDescription</key>',
             '<string>QTKit c·∫ßn quy·ªÅn Accessibility ƒë·ªÉ theo d√µi ph√≠m t·∫Øt Cmd+C v√† t·ª± ƒë·ªông ph√°t hi·ªán timestamp trong clipboard.</string>'),
            ('<key>NSInputMonitoringUsageDescription</key>', 
             '<string>QTKit c·∫ßn quy·ªÅn Input Monitoring ƒë·ªÉ ph√°t hi·ªán khi b·∫°n nh·∫•n t·ªï h·ª£p ph√≠m Cmd+C.</string>'),
            ('<key>NSAppleEventsUsageDescription</key>',
             '<string>QTKit c·∫ßn quy·ªÅn System Events ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi clipboard v√† hi·ªÉn th·ªã th√¥ng b√°o.</string>'),
            
            # App metadata
            ('<key>CFBundleDisplayName</key>',
             '<string>QTKit - QuickTime Kit</string>'),
            ('<key>CFBundleGetInfoString</key>',
             '<string>QTKit 1.0.0, Copyright ¬© 2025 QT Corporation</string>'),
            ('<key>NSHumanReadableCopyright</key>',
             '<string>Copyright ¬© 2025 QT Corporation. All rights reserved.</string>'),
            
            # Security and compatibility
            ('<key>LSMinimumSystemVersion</key>',
             '<string>10.13.0</string>'),
            ('<key>NSHighResolutionCapable</key>',
             '<true/>'),
            ('<key>NSSupportsAutomaticGraphicsSwitching</key>',
             '<true/>'),
            ('<key>LSUIElement</key>',
             '<true/>'),  # Background app
        ]
        
        for key, value in updates:
            if key not in content:
                content = content.replace('</dict>', f'\t{key}\n\t{value}\n</dict>')
        
        with open(info_plist, 'w') as f:
            f.write(content)
        
        print("‚úÖ Info.plist updated with permissions and metadata")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è Could not update Info.plist: {e}")
        return False

def sign_app(identity=None):
    """Code sign the app bundle"""
    app_path = "dist/QTKit.app"
    
    if not identity:
        print("‚ö†Ô∏è No signing identity, skipping code signing")
        return True
        
    print(f"‚úçÔ∏è Code signing app with: {identity}")
    
    try:
        # Sign with proper entitlements for distribution
        cmd = [
            "codesign",
            "--force",
            "--options", "runtime",  # Hardened runtime
            "--sign", identity,
            "--deep",
            "--strict",
            "--timestamp",  # Secure timestamp
            app_path
        ]
        
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print("‚úÖ Code signing successful!")
        
        # Verify the signature
        verify_cmd = ["codesign", "--verify", "--verbose", app_path]
        subprocess.run(verify_cmd, check=True, capture_output=True)
        print("‚úÖ Code signature verified!")
        
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Code signing failed: {e}")
        if e.stderr:
            print(f"Error details: {e.stderr}")
        return False

def create_professional_dmg():
    """Create professional distribution DMG"""
    print("üìÄ Creating professional DMG...")
    
    if not os.path.exists("dist/QTKit.app"):
        print("‚ùå App not found")
        return False
    
    # Clean old DMG
    dmg_name = "QTKit-1.0.0.dmg"
    if os.path.exists(dmg_name):
        os.remove(dmg_name)
    
    # Create temp directory
    temp_dir = "temp_dmg"
    if os.path.exists(temp_dir):
        shutil.rmtree(temp_dir)
    os.makedirs(temp_dir)
    
    try:
        # Copy app and create Applications symlink
        print("  üìÅ Setting up DMG contents...")
        shutil.copytree("dist/QTKit.app", f"{temp_dir}/QTKit.app")
        os.symlink("/Applications", f"{temp_dir}/Applications")
        
        # Create comprehensive installation instructions
        instructions = """QTKit - QuickTime Kit v1.0.0
================================

üéØ H∆Ø·ªöNG D·∫™N C√ÅI ƒê·∫∂T:

1Ô∏è‚É£ K√©o QTKit.app v√†o th∆∞ m·ª•c Applications
2Ô∏è‚É£ M·ªü QTKit t·ª´ Applications ho·∫∑c Spotlight (Cmd+Space)
3Ô∏è‚É£ C·∫•p quy·ªÅn Accessibility khi ƒë∆∞·ª£c y√™u c·∫ßu:
   ‚Ä¢ System Preferences ‚Üí Security & Privacy ‚Üí Privacy ‚Üí Accessibility
   ‚Ä¢ Ho·∫∑c System Settings ‚Üí Privacy & Security ‚Üí Accessibility (macOS 13+)
   ‚Ä¢ Th√™m QTKit v√†o danh s√°ch v√† tick ch·ªçn

üì± C√ÅCH S·ª¨ D·ª§NG:

‚Ä¢ App s·∫Ω ch·∫°y ng·∫ßm (icon xu·∫•t hi·ªán trong system tray)
‚Ä¢ Copy timestamp (nh∆∞: 1640995200) v√† nh·∫•n Cmd+C
‚Ä¢ Tooltip s·∫Ω hi·ªán th·ªùi gian GMT v√† VN
‚Ä¢ Right-click tray icon ƒë·ªÉ:
  - M·ªü c·∫•u h√¨nh
  - Xem h∆∞·ªõng d·∫´n
  - Tho√°t app

‚öôÔ∏è T√çNH NƒÇNG:

‚Ä¢ T·ª± ƒë·ªông detect timestamp trong clipboard
‚Ä¢ Hi·ªÉn th·ªã th·ªùi gian GMT v√† VN
‚Ä¢ Configurable decimal places
‚Ä¢ Detect mode cho text d√†i
‚Ä¢ Professional system tray integration

üÜò KH·∫ÆC PH·ª§C S·ª∞ C·ªê:

N·∫øu app kh√¥ng ho·∫°t ƒë·ªông:
‚Ä¢ Ki·ªÉm tra quy·ªÅn Accessibility ƒë√£ ƒë∆∞·ª£c c·∫•p
‚Ä¢ Th·ª≠ kh·ªüi ƒë·ªông l·∫°i app
‚Ä¢ Right-click app ‚Üí Open n·∫øu b·ªã c·∫£nh b√°o security

N·∫øu kh√¥ng t√¨m th·∫•y app:
‚Ä¢ T√¨m "QTKit" trong Spotlight (Cmd+Space)
‚Ä¢ Ho·∫∑c v√†o Applications folder
‚Ä¢ Check system tray (g√≥c tr√™n b√™n ph·∫£i m√†n h√¨nh)

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
Copyright ¬© 2025 QT Corporation. All rights reserved.
Developed by Quang Tr·∫ßn - QT Corporation
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""
        
        with open(f"{temp_dir}/üìñ H∆Ø·ªöNG D·∫™N C√ÄI ƒê·∫∂T V√Ä S·ª¨ D·ª§NG.txt", "w", encoding="utf-8") as f:
            f.write(instructions)
        
        # Create troubleshooting guide
        troubleshooting = """QTKit - Kh·∫Øc ph·ª•c s·ª± c·ªë
====================

‚ùå L·ªñI TH∆Ø·ªúNG G·∫∂P:

1. "QTKit can't be opened because it is from an unidentified developer"
   ‚Üí Right-click app ‚Üí Open ‚Üí Open anyway
   ‚Üí Ho·∫∑c: System Preferences ‚Üí Security ‚Üí "Open Anyway"

2. App kh√¥ng ph·∫£n ·ª©ng khi nh·∫•n Cmd+C
   ‚Üí Ki·ªÉm tra quy·ªÅn Accessibility
   ‚Üí System Preferences ‚Üí Security & Privacy ‚Üí Privacy ‚Üí Accessibility
   ‚Üí ƒê·∫£m b·∫£o QTKit ƒë√£ ƒë∆∞·ª£c tick ch·ªçn

3. Kh√¥ng t√¨m th·∫•y app sau khi c√†i
   ‚Üí T√¨m "QTKit" trong Spotlight (Cmd+Space)
   ‚Üí Ho·∫∑c v√†o /Applications/QTKit.app
   ‚Üí Check system tray icon

4. App b·ªã crash ho·∫∑c kh√¥ng kh·ªüi ƒë·ªông
   ‚Üí M·ªü Terminal v√† ch·∫°y: /Applications/QTKit.app/Contents/MacOS/QTKit
   ‚Üí Xem error messages
   ‚Üí Ki·ªÉm tra log: ~/Library/Logs/QTKit/qtkit.log

üîß RESET APP:

N·∫øu app ho·∫°t ƒë·ªông kh√¥ng b√¨nh th∆∞·ªùng:
1. Quit app t·ª´ tray menu
2. X√≥a settings: ~/Library/Preferences/com.qt-corporation.qtkit.plist
3. Kh·ªüi ƒë·ªông l·∫°i app

üìû H·ªñ TR·ª¢:

N·∫øu v·∫´n g·∫∑p v·∫•n ƒë·ªÅ, li√™n h·ªá QT Corporation
Ho·∫∑c check logs t·∫°i: ~/Library/Logs/QTKit/qtkit.log
"""
        
        with open(f"{temp_dir}/üîß KH·∫ÆC PH·ª§C S·ª∞ C·ªê.txt", "w", encoding="utf-8") as f:
            f.write(troubleshooting)
        
        # Create DMG with professional settings
        print("  üî® Creating DMG file...")
        cmd = [
            "hdiutil", "create",
            "-volname", "QTKit Installer",
            "-srcfolder", temp_dir,
            "-ov", "-format", "UDZO",
            "-imagekey", "zlib-level=9",  # Best compression
            dmg_name
        ]
        
        subprocess.run(cmd, check=True, capture_output=True)
        shutil.rmtree(temp_dir)
        print(f"‚úÖ Professional DMG created: {dmg_name}")
        return True
        
    except Exception as e:
        print(f"‚ùå DMG creation failed: {e}")
        if os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)
        return False

def main():
    print("üöÄ QTKit Enhanced Build Script")
    print("=" * 40)
    print(f"Python: {sys.version.split()[0]}")
    print(f"Platform: {sys.platform}")
    
    if sys.platform != "darwin":
        print("‚ùå This script is for macOS only!")
        return
    
    # Check requirements
    required_files = ["main.py", "logo.png", "requirements.txt"]
    for file in required_files:
        if not os.path.exists(file):
            print(f"‚ùå Required file not found: {file}")
            return
        print(f"‚úÖ Found: {file}")
    
    # Build process
    print("\n" + "=" * 40)
    check_tools()
    clean_build()
    
    if not install_requirements():
        return
        
    if not build_app():
        return
        
    if not update_info_plist():
        return
    
    # Code signing
    print("\n" + "=" * 40)
    signing_identity = get_signing_identity()
    signed = sign_app(signing_identity)
    
    # DMG creation
    print("\n" + "=" * 40)
    choice = input("üìÄ Create professional DMG? (y/n): ").lower()
    dmg_created = False
    if choice == 'y':
        dmg_created = create_professional_dmg()
    
    # Summary
    print("\n" + "=" * 40)
    print("üéâ Build completed!")
    print("\nüìÅ Output files:")
    print("  ‚úÖ dist/QTKit.app - Application bundle")
    if dmg_created:
        print("  ‚úÖ QTKit-1.0.0.dmg - Distribution installer")
    
    print("\nüìã Build summary:")
    print(f"  ‚Ä¢ Code signed: {'‚úÖ Yes' if signed and signing_identity else '‚ö†Ô∏è No (may show warnings)'}")
    print(f"  ‚Ä¢ Permissions: ‚úÖ Comprehensive Info.plist")
    print(f"  ‚Ä¢ Distribution: {'‚úÖ Professional DMG' if dmg_created else '‚ö†Ô∏è App bundle only'}")
    
    if not signing_identity:
        print("\nüí° To eliminate security warnings:")
        print("  1. Get Apple Developer ID certificate ($99/year)")
        print("  2. Rebuild with proper code signing")
        print("  3. Optionally notarize with Apple")
    
    print("\nüöÄ Ready for distribution!")

if __name__ == "__main__":
    main()
